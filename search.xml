<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/bcRevincent.github.io/hello-world/</url>
    <content><![CDATA[<p>Welcome to <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvLw==">Hexo</span>! This is your very first post. Check <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=">troubleshooting</span> or you can ask me on <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==">GitHub</span>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start">#</a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post">#</a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s">Writing</span></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server">#</a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=">Server</span></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files">#</a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s">Generating</span></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites">#</a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s">Deployment</span></p>
]]></content>
  </entry>
  <entry>
    <title>图片与代码块共存样例</title>
    <url>/bcRevincent.github.io/python/</url>
    <content><![CDATA[<h1 id="1-插入图片"><a class="markdownIt-Anchor" href="#1-插入图片">#</a> 1. 插入图片</h1>
<h2 id="-swig1-图片"><a class="markdownIt-Anchor" href="#-swig1-图片">#</a> <img data-src="/bcRevincent.github.io/python/python.jpg" class="" title="图片1"><br>
<img data-src="python.jpg" alt="图片"></h2>
<h1 id="2-插入代码块"><a class="markdownIt-Anchor" href="#2-插入代码块">#</a> 2. 插入代码块</h1>
<h2 id="-code0-"><a class="markdownIt-Anchor" href="#-code0-">#</a> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image </span><br></pre></td></tr></table></figure></h2>
<h1 id="3-插入公式"><a class="markdownIt-Anchor" href="#3-插入公式">#</a> 3. 插入公式</h1>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mrow><mn>3</mn><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msqrt><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sqrt {3x-1}+(1+x)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.17444499999999996em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8655550000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-2.825555em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.17444499999999996em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p>
<hr>
<p>这是第 2 次更新！！！</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>HDU3966（树链剖分 + 区间更新 + 点查询）</title>
    <url>/bcRevincent.github.io/HDU3966/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L3Byb2JsZW0vSERVLTM5NjY=">题目传送门</span></p>
<h1 id="1-题目大意及思路"><a class="markdownIt-Anchor" href="#1-题目大意及思路">#</a> 1 题目大意及思路</h1>
<p>一颗 N 个结点的树，给你 P 次操作</p>
<p>操作 I ：结点 C1–&gt;C2 之间的所有结点权值加 K；</p>
<p>操作 D：结点 C1-&gt;C2 之间的所有结点权值减 K；</p>
<p>操作 Q：询问结点 C 的值。</p>
<p>思路：这一眼看上去就知道是一道裸的树链剖分 (点操作)，就不多说了直接上代码。没学过树链剖分的建议先入门再来看代码。</p>
<hr>
<h1 id="2-解题代码"><a class="markdownIt-Anchor" href="#2-解题代码">#</a> 2 解题代码</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 50005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,next;</span><br><span class="line">&#125; edge[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> pre[N],cnt;</span><br><span class="line"><span class="keyword">int</span> son[N],dep[N],siz[N];</span><br><span class="line"><span class="keyword">int</span> tid[N],id,top[N],fa[N];</span><br><span class="line"><span class="keyword">int</span> n,m,p;</span><br><span class="line"><span class="keyword">int</span> num[N],add[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, ch, flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((ch = getchar()) == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        res = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span> )</span><br><span class="line">        res = res * <span class="number">10</span> + ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> flag ? -res : res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = id = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">    <span class="built_in">memset</span>(siz, <span class="number">0</span>, <span class="keyword">sizeof</span>(siz));</span><br><span class="line">    <span class="built_in">memset</span>(add, <span class="number">0</span>, <span class="keyword">sizeof</span>(add));</span><br><span class="line">    <span class="built_in">memset</span>(son, <span class="number">0</span>, <span class="keyword">sizeof</span>(son));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].u = u;</span><br><span class="line">    edge[cnt].v = v;</span><br><span class="line">    edge[cnt].next = pre[u];</span><br><span class="line">    pre[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> dp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = dp;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    son[u] = <span class="number">0</span>;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[u]; ~i; i=edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v != f)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs1(v, u, dp+<span class="number">1</span>);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class="line">                son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tid[u] = ++id;</span><br><span class="line">    top[u] = tp;</span><br><span class="line">    <span class="keyword">if</span>(son[u])</span><br><span class="line">        dfs2(son[u], tp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[u]; ~i; i=edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v != fa[u] &amp;&amp; v != son[u])</span><br><span class="line">            dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">    &#123;</span><br><span class="line">        add[rt] += v;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(add[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        add[rt&lt;&lt;<span class="number">1</span>] += add[rt];</span><br><span class="line">        add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += add[rt];</span><br><span class="line">        add[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= mid)</span><br><span class="line">        update(rt&lt;&lt;<span class="number">1</span>, l, mid, ql, qr, v);</span><br><span class="line">    <span class="keyword">if</span>(qr &gt; mid)</span><br><span class="line">        update(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, ql, qr, v);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; l == pos)</span><br><span class="line">        <span class="keyword">return</span> add[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(add[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        add[rt&lt;&lt;<span class="number">1</span>] += add[rt];</span><br><span class="line">        add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] += add[rt];</span><br><span class="line">        add[rt] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>, l, mid, pos);</span><br><span class="line">    <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[u] != top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]] &lt; dep[top[v]])</span><br><span class="line">            swap(u, v);</span><br><span class="line">        update(<span class="number">1</span>, <span class="number">1</span>, n, tid[top[u]], tid[u], k);</span><br><span class="line">        u = fa[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dep[u] &gt; dep[v])</span><br><span class="line">        swap(u, v);</span><br><span class="line">    update(<span class="number">1</span>, <span class="number">1</span>, n, tid[u], tid[v], k);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n,&amp;m,&amp;p))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            num[i] = scan();</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = scan();</span><br><span class="line">            <span class="keyword">int</span> v = scan();</span><br><span class="line">            addEdge(u, v);</span><br><span class="line">            addEdge(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs1(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span>(p--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> c1,c2,k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op);</span><br><span class="line">            <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;c1,&amp;c2,&amp;k);</span><br><span class="line">                LCA(c1, c2, k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;c1,&amp;c2,&amp;k);</span><br><span class="line">                LCA(c1, c2, -k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;c1);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, num[c1] + query(<span class="number">1</span>, <span class="number">1</span>, n, tid[c1]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>SPOJ-QTREE</title>
    <url>/bcRevincent.github.io/SPOJ-QTREE/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L2NvbnRlc3QvMTU3MjM0I3Byb2JsZW0vQQ==">题目传送门</span></p>
<h1 id="1-题目大意"><a class="markdownIt-Anchor" href="#1-题目大意">#</a> 1. 题目大意</h1>
<p>一棵树，N 个结点，任意次操作。</p>
<p>操作 Change ：a，b  将第 a 条边的权值改为 b；</p>
<p>操作 Query：a，b  查询结点 a-&gt;b 路径上的最大边权。</p>
<p>这是一道很裸的关于边操作的树链剖分题目，不多说了，直接上代码。</p>
<hr>
<h1 id="2-解题代码"><a class="markdownIt-Anchor" href="#2-解题代码">#</a> 2. 解题代码</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 10005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w,next;</span><br><span class="line">&#125;edge[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> T,n,a,b,c;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> pre[N],cnt;</span><br><span class="line"><span class="keyword">int</span> son[N],dep[N],tid[N];</span><br><span class="line"><span class="keyword">int</span> top[N],fa[N],siz[N],id;</span><br><span class="line"><span class="keyword">int</span> maxx[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> e[N][<span class="number">3</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = id = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">    <span class="built_in">memset</span>(maxx, -inf, <span class="keyword">sizeof</span>(maxx));</span><br><span class="line">    <span class="built_in">memset</span>(siz, <span class="number">0</span>, <span class="keyword">sizeof</span>(siz));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].u = u;</span><br><span class="line">    edge[cnt].v = v;</span><br><span class="line">    edge[cnt].next = pre[u];</span><br><span class="line">    pre[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> dp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = dp;</span><br><span class="line">    fa[u] = f;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    son[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[u]; ~i; i=edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v != f)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs1(v, u, dp+<span class="number">1</span>);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class="line">                son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[u] = tp;</span><br><span class="line">    tid[u] = ++id;</span><br><span class="line">    <span class="keyword">if</span>(son[u] == <span class="number">0</span>)<span class="keyword">return</span> ;</span><br><span class="line">    dfs2(son[u], tp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[u]; ~i; i=edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v != son[u] &amp;&amp; v != fa[u])</span><br><span class="line">            dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; l == pos)</span><br><span class="line">    &#123;</span><br><span class="line">        maxx[rt] = w;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)</span><br><span class="line">        update(rt&lt;&lt;<span class="number">1</span>, l, mid, pos, w);</span><br><span class="line">    <span class="keyword">else</span> update(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, pos, w);</span><br><span class="line">    maxx[rt] = max(maxx[rt&lt;&lt;<span class="number">1</span>], maxx[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        <span class="keyword">return</span> maxx[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">if</span>(ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">return</span> max(query(rt&lt;&lt;<span class="number">1</span>, l, mid, ql, qr), query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, ql, qr));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = -inf;</span><br><span class="line">    <span class="keyword">while</span>(top[x] != top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]])</span><br><span class="line">            swap(x, y);</span><br><span class="line">        <span class="comment">//if(top[x]==x)</span></span><br><span class="line">            ans = max(ans, query(<span class="number">1</span>, <span class="number">2</span>, n, tid[top[x]], tid[x]));</span><br><span class="line">        <span class="comment">//else ans = max(ans, query(1, 2, n, tid[top[x]]+1, tid[x]));</span></span><br><span class="line">        x = fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x != y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[x] &gt; dep[y])</span><br><span class="line">            swap(x, y);</span><br><span class="line">        ans = max(ans, query(<span class="number">1</span>, <span class="number">2</span>, n, tid[x]+<span class="number">1</span>, tid[y]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[e[i][<span class="number">0</span>]] &gt; dep[e[i][<span class="number">1</span>]])</span><br><span class="line">            swap(e[i][<span class="number">0</span>], e[i][<span class="number">1</span>]);</span><br><span class="line">        update(<span class="number">1</span>, <span class="number">2</span>, n, tid[e[i][<span class="number">1</span>]], e[i][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a,&amp;b,&amp;c);</span><br><span class="line">            addEdge(a, b, c);</span><br><span class="line">            addEdge(b, a, c);</span><br><span class="line">            e[i][<span class="number">0</span>] = a,e[i][<span class="number">1</span>] = b,e[i][<span class="number">2</span>] = c;</span><br><span class="line">        &#125;</span><br><span class="line">        deal();</span><br><span class="line">        <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op) &amp;&amp; op[<span class="number">0</span>]!=<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a,&amp;b);</span><br><span class="line">            <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, get(a, b));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                update(<span class="number">1</span>, <span class="number">2</span>, n, tid[e[a][<span class="number">1</span>]], b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>POJ 3237 Tree(树链剖分 + 单点更新 + 区间更新 + 区间查询)</title>
    <url>/bcRevincent.github.io/POJ3237/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly92anVkZ2UubmV0L2NvbnRlc3QvMTU3MjM0I3Byb2JsZW0vSA==">题目传送门：POJ 3237 Tree</span></p>
<h1 id="1-题目大意及思路"><a class="markdownIt-Anchor" href="#1-题目大意及思路">#</a> 1. 题目大意及思路</h1>
<p>这道题就是在 SPOJ-QTREE 这道题目上加了区间更新关键就是权值取反部分怎么处理，取反后最大值将会是原来的最小值，所以既要存最大值，又要存最小值。取反后最大值为原来的最小值取反，最小值为原来的最大值取反。在这里我是用 add 这个数组当作懒标记数组，当一个区间取两次反时还是原来的最大值和最小值，因此要取 add [rt] 数组进行 %2 操作，当 add [rt] 为 1 的时候向下传递标记，否则不传递。</p>
<hr>
<h1 id="2-解题代码"><a class="markdownIt-Anchor" href="#2-解题代码">#</a> 2. 解题代码</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,next;</span><br><span class="line">&#125; edge[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> e[N][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> son[N],dep[N],fa[N];</span><br><span class="line"><span class="keyword">int</span> id,tid[N],top[N],siz[N];</span><br><span class="line"><span class="keyword">int</span> cnt,pre[N];</span><br><span class="line"><span class="keyword">int</span> Max[N&lt;&lt;<span class="number">2</span>],Min[N&lt;&lt;<span class="number">2</span>],add[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> T,n,a,b,c;</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Scan</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>,res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) == <span class="string">&#x27; &#x27;</span> || ch == <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> res = ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch = getchar()) != <span class="string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        res = res * <span class="number">10</span> +  ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> flag * res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = id = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(pre));</span><br><span class="line">    <span class="built_in">memset</span>(son, <span class="number">0</span>, <span class="keyword">sizeof</span>(son));</span><br><span class="line">    <span class="built_in">memset</span>(siz, <span class="number">0</span>, <span class="keyword">sizeof</span>(siz));</span><br><span class="line">    <span class="built_in">memset</span>(Max, -inf, <span class="keyword">sizeof</span>(Max));</span><br><span class="line">    <span class="built_in">memset</span>(Min, inf, <span class="keyword">sizeof</span>(Min));</span><br><span class="line">    <span class="built_in">memset</span>(add, <span class="number">0</span>, <span class="keyword">sizeof</span>(add));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].v = v;</span><br><span class="line">    edge[cnt].next = pre[u];</span><br><span class="line">    pre[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f, <span class="keyword">int</span> dp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fa[u] = f,dep[u] = dp,son[u] = <span class="number">0</span>,siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[u]; ~i; i=edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v != f)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs1(v, u, dp+<span class="number">1</span>);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class="line">                son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top[u] = tp,tid[u] = ++id;</span><br><span class="line">    <span class="keyword">if</span>(son[u])</span><br><span class="line">        dfs2(son[u], tp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pre[u]; ~i; i=edge[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge[i].v;</span><br><span class="line">        <span class="keyword">if</span>(v != fa[u] &amp;&amp; v != son[u])</span><br><span class="line">            dfs2(v, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Max[rt] = max(Max[rt&lt;&lt;<span class="number">1</span>], Max[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    Min[rt] = min(Min[rt&lt;&lt;<span class="number">1</span>], Min[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(add[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        add[rt&lt;&lt;<span class="number">1</span>] = (add[rt&lt;&lt;<span class="number">1</span>] + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">        add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = (add[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">        add[rt] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxl = Max[rt&lt;&lt;<span class="number">1</span>],maxr = Max[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        Max[rt&lt;&lt;<span class="number">1</span>] = -Min[rt&lt;&lt;<span class="number">1</span>];</span><br><span class="line">        Min[rt&lt;&lt;<span class="number">1</span>] = -maxl;</span><br><span class="line">        Max[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = -Min[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">        Min[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] = -maxr;</span><br><span class="line">        push_up(rt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_1</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r &amp;&amp; l == pos)</span><br><span class="line">    &#123;</span><br><span class="line">        add[rt] = <span class="number">0</span>;</span><br><span class="line">        Max[rt] = Min[rt] = v;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(rt);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= mid)</span><br><span class="line">        update_1(rt&lt;&lt;<span class="number">1</span>, l, mid, pos, v);</span><br><span class="line">    <span class="keyword">else</span> update_1(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, pos, v);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfs1(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[e[i][<span class="number">0</span>]] &gt; dep[e[i][<span class="number">1</span>]])</span><br><span class="line">            swap(e[i][<span class="number">0</span>], e[i][<span class="number">1</span>]);</span><br><span class="line">        update_1(<span class="number">1</span>, <span class="number">2</span>, n, tid[e[i][<span class="number">1</span>]], e[i][<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_2</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">    &#123;</span><br><span class="line">        add[rt] = (add[rt] + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> mmax = Max[rt];</span><br><span class="line">        Max[rt] = -Min[rt],Min[rt] = -mmax;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    push_down(rt);</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= mid)</span><br><span class="line">        update_2(rt&lt;&lt;<span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">if</span>(qr &gt; mid)</span><br><span class="line">        update_2(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, ql, qr);</span><br><span class="line">    push_up(rt);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca_up</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[u] != top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]] &lt; dep[top[v]])</span><br><span class="line">            swap(u, v);</span><br><span class="line">        update_2(<span class="number">1</span>, <span class="number">2</span>, n, tid[top[u]], tid[u]);</span><br><span class="line">        u = fa[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(u != v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[u] &gt; dep[v])</span><br><span class="line">            swap(u, v);</span><br><span class="line">        update_2(<span class="number">1</span>, <span class="number">2</span>, n, tid[u]+<span class="number">1</span>, tid[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr)</span><br><span class="line">        <span class="keyword">return</span> Max[rt];</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    push_down(rt);</span><br><span class="line">    <span class="keyword">if</span>(qr &lt;= mid)</span><br><span class="line">        <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>, l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">if</span>(ql &gt; mid)</span><br><span class="line">        <span class="keyword">return</span> query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="keyword">return</span> max(query(rt&lt;&lt;<span class="number">1</span>, l, mid, ql, qr), query(rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mid+<span class="number">1</span>, r, ql, qr));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca_query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = -inf;</span><br><span class="line">    <span class="keyword">while</span>(top[u] != top[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[u]] &lt; dep[top[v]])</span><br><span class="line">            swap(u, v);</span><br><span class="line">        ans = max(ans, query(<span class="number">1</span>, <span class="number">2</span>, n, tid[top[u]], tid[u]));</span><br><span class="line">        u = fa[top[u]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(u != v)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[u] &gt; dep[v])</span><br><span class="line">            swap(u, v);</span><br><span class="line">        ans = max(ans, query(<span class="number">1</span>, <span class="number">2</span>, n, tid[u]+<span class="number">1</span>, tid[v]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = Scan();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        n = Scan();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            e[i][<span class="number">0</span>] = Scan(),e[i][<span class="number">1</span>] = Scan(),e[i][<span class="number">2</span>] = Scan();</span><br><span class="line">            addEdge(e[i][<span class="number">0</span>], e[i][<span class="number">1</span>]);</span><br><span class="line">            addEdge(e[i][<span class="number">1</span>], e[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        deal();</span><br><span class="line">        <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, op) &amp;&amp; op[<span class="number">0</span>] != <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a = Scan(),b = Scan();</span><br><span class="line">            <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">                update_1(<span class="number">1</span>, <span class="number">2</span>, n, tid[e[a][<span class="number">1</span>]], b);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">&#x27;N&#x27;</span>)</span><br><span class="line">                lca_up(a, b);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, lca_query(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
</search>
